namespace tech.quagma.ꗃⳆmaths.ꗃⳆgeometry

// quaternion algebra (p=3, q=0)
module ꕺⳆuseꓽᎶꓹ3ꓹ0=

// multi-vector in Ꮆ(3, 0)
    type ᑉᎶᐣ= {|
            ``λꓸ``: float; // ᑉeꓸᐣ
            ``λ₁``: float; // ᑉe₁ᐣ
            ``λ₂``: float; // ᑉe₂ᐣ
            ``λ₃``: float; // ᑉe₃ᐣ
            ``λ₁₂``: float; // ᑉe₁₂ᐣ
            ``λ₁₃``: float; // ᑉe₁₃ᐣ
            ``λ₂₃``: float; // ᑉe₂₃ᐣ
            ``λ₁₂₃``: float; // ᑉe₁₂₃ᐣ
    |}

    let ``ꖴꓸ`` // int. product on eꓸ
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λꓸ``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₃``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁₂₃``

    let ``ꖴ₁`` // int. product on e₁
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₁₂``
            - ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₃``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₂₃``

    let ``ꖴ₂`` // int. product on e₂
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₂₃``
            - ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁``
            - ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₃``
            - ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁₃``

    let ``ꖴ₃`` // int. product on e₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₃``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λꓸ``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁₂₃``
            - ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁``
            - ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁₂``

    let ``ꖴ₁₂`` // int. product on e₁₂
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λꓸ``

    let ``ꖴ₁₃`` // int. product on e₁₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λꓸ``

    let ``ꖴ₂₃`` // int. product on e₂₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λꓸ``

    let ``ꖴ₁₂₃`` // int. product on e₁₂₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λꓸ``

    let ``ꖴ`` // full interior product
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ): ᑉᎶᐣ= {|
            ``λꓸ``= ``ꖴꓸ`` ᑉuᐣ ᑉvᐣ;
            ``λ₁``= ``ꖴ₁`` ᑉuᐣ ᑉvᐣ;
            ``λ₂``= ``ꖴ₂`` ᑉuᐣ ᑉvᐣ;
            ``λ₃``= ``ꖴ₃`` ᑉuᐣ ᑉvᐣ;
            ``λ₁₂``= ``ꖴ₁₂`` ᑉuᐣ ᑉvᐣ;
            ``λ₁₃``= ``ꖴ₁₃`` ᑉuᐣ ᑉvᐣ;
            ``λ₂₃``= ``ꖴ₂₃`` ᑉuᐣ ᑉvᐣ;
            ``λ₁₂₃``= ``ꖴ₁₂₃`` ᑉuᐣ ᑉvᐣ;
        |}

    let ``ꕕꓸ`` // ext. product on eꓸ
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λꓸ``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₃``
            - ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁₂``
            - ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁₃``
            - ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₂₃``
            - ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁₂₃``

    let ``ꕕ₁`` // ext. product on e₁
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₁₂``
            - ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₃``
            - ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₁₂₃``
            - ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₂₃``

    let ``ꕕ₂`` // ext. product on e₂
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₂₃``
            - ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₃``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁₃``

    let ``ꕕ₃`` // ext. product on e₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₃``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁₂₃``
            - ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁``
            - ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₂``
            - ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁₂``

    let ``ꕕ₁₂`` // ext. product on e₁₂
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₂``
            - ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₃``

    let ``ꕕ₁₃`` // ext. product on e₁₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₃``
            - ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₁₂₃``
            - ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λꓸ``
            - ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₁₂``
            - ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₂``

    let ``ꕕ₂₃`` // ext. product on e₂₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₂₃``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₃``
            - ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₂``
            - ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λꓸ``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λ₁``

    let ``ꕕ₁₂₃`` // ext. product on e₁₂₃
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ)=
            + ᑉuᐣ.``λꓸ`` * ᑉvᐣ.``λ₁₂₃``
            + ᑉuᐣ.``λ₁`` * ᑉvᐣ.``λ₂₃``
            - ᑉuᐣ.``λ₂`` * ᑉvᐣ.``λ₁₃``
            + ᑉuᐣ.``λ₃`` * ᑉvᐣ.``λ₁₂``
            + ᑉuᐣ.``λ₁₂`` * ᑉvᐣ.``λ₃``
            - ᑉuᐣ.``λ₁₃`` * ᑉvᐣ.``λ₂``
            + ᑉuᐣ.``λ₂₃`` * ᑉvᐣ.``λ₁``
            + ᑉuᐣ.``λ₁₂₃`` * ᑉvᐣ.``λꓸ``

    let ``ꕕ`` // full exterior product
        (ᑉuᐣ: ᑉᎶᐣ)
        (ᑉvᐣ: ᑉᎶᐣ): ᑉᎶᐣ= {|
            ``λꓸ``= ``ꕕꓸ`` ᑉuᐣ ᑉvᐣ;
            ``λ₁``= ``ꕕ₁`` ᑉuᐣ ᑉvᐣ;
            ``λ₂``= ``ꕕ₂`` ᑉuᐣ ᑉvᐣ;
            ``λ₃``= ``ꕕ₃`` ᑉuᐣ ᑉvᐣ;
            ``λ₁₂``= ``ꕕ₁₂`` ᑉuᐣ ᑉvᐣ;
            ``λ₁₃``= ``ꕕ₁₃`` ᑉuᐣ ᑉvᐣ;
            ``λ₂₃``= ``ꕕ₂₃`` ᑉuᐣ ᑉvᐣ;
            ``λ₁₂₃``= ``ꕕ₁₂₃`` ᑉuᐣ ᑉvᐣ;
        |}